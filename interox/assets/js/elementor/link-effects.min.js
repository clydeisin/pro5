! function() {
    "use strict";
    jQuery(window).on("elementor/frontend/init", () => {
        elementorFrontend.hooks.addAction("frontend/element_ready/interox-link-effects.default", e => {
            const t = e.find(".link").get(0);
            i(".link__item").then(() => {
                new o(t)
            })
        })
    });
    const s = (e, t, i, s, r) => (e - t) * (r - s) / (i - t) + s,
        r = (e, t, i) => (1 - i) * e + i * t,
        a = document.body,
        n = [],
        i = t => new Promise(e => {
            const i = document.createElement("div");
            i.style.visibility = "hidden", a.appendChild(i), [...document.querySelectorAll(t)].forEach(e => {
                const t = document.createElement("img");
                t.style.width = 0, t.src = e.dataset.img, t.className = "preload", i.appendChild(t), n.push({
                    1: e.dataset.img
                })
            }), imagesLoaded(document.querySelectorAll(".preload"), () => {
                i.parentNode.removeChild(i), e()
            })
        });
    class o {
        constructor(e) {
            this.DOM = {
                el: e
            }, this.DOM.linkItems = this.DOM.el.querySelectorAll(".link__item"), this.animatableProperties = {
                tx: {
                    previous: 0,
                    current: 0,
                    amt: .08
                },
                ty: {
                    previous: 0,
                    current: 0,
                    amt: .08
                },
                rotation: {
                    previous: 0,
                    current: 0,
                    amt: .08
                },
                brightness: {
                    previous: 1,
                    current: 1,
                    amt: .08
                }
            }, this.linkItems = [], [...this.DOM.linkItems].forEach((e, t) => this.linkItems.push(new u(e, t, this.animatableProperties))), this.showInteroxMenuItems()
        }
        showInteroxMenuItems() {
            gsap.to(this.linkItems.map(e => e.DOM.textInner), {
                duration: 1.2,
                ease: "Expo.easeOut",
                startAt: {
                    y: "100%"
                },
                y: 0,
                delay: e => .06 * e
            })
        }
    }
    let l = {
            x: 0,
            y: 0
        },
        h = l,
        m;
    window.addEventListener("mousemove", e => l = (e => {
        let t = 0,
            i = 0;
        return (e = e || window.event).pageX || e.pageY ? (t = e.pageX, i = e.pageY) : (e.clientX || e.clientY) && (t = e.clientX + a.scrollLeft + document.documentElement.scrollLeft, i = e.clientY + a.scrollTop + document.documentElement.scrollTop), {
            x: t,
            y: i
        }
    })(e));
    class u {
        constructor(e, t, i) {
            this.DOM = {
                el: e
            }, this.inInteroxMenuPosition = t, this.animatableProperties = i, this.DOM.textInner = this.DOM.el.querySelector(".link__item-text"), this.layout(), this.initEvents()
        }
        layout() {
            this.DOM.reveal = document.createElement("div"), this.DOM.reveal.className = "hover-reveal", this.DOM.reveal.style.transformOrigin = "0% 0%", this.DOM.revealInner = document.createElement("div"), this.DOM.revealInner.className = "hover-reveal__inner", this.DOM.revealImage = document.createElement("div"), this.DOM.revealImage.className = "hover-reveal__img", this.DOM.revealImage.style.backgroundImage = `url(${n[this.inInteroxMenuPosition][1]})`, this.DOM.revealInner.appendChild(this.DOM.revealImage), this.DOM.reveal.appendChild(this.DOM.revealInner), this.DOM.el.appendChild(this.DOM.reveal)
        }
        getMouseArea() {
            return this.bounds.el.top + this.bounds.el.height / 2 <= window.innerHeight / 2 ? "up" : "down"
        }
        calcBounds() {
            this.bounds = {
                el: this.DOM.el.getBoundingClientRect(),
                reveal: this.DOM.reveal.getBoundingClientRect()
            }
        }
        initEvents() {
            this.mouseenterFn = e => {
                this.showImage(), this.firstRAFCycle = !0, this.DOM.reveal.style.transformOrigin = `0% ${"up"===this.mouseArea?0:100}%`, this.loopRender()
            }, this.mouseleaveFn = () => {
                this.stopRendering(), this.hideImage()
            }, this.DOM.el.addEventListener("mouseenter", this.mouseenterFn), this.DOM.el.addEventListener("mouseleave", this.mouseleaveFn)
        }
        showImage() {
            gsap.killTweensOf(this.DOM.revealInner), gsap.killTweensOf(this.DOM.revealImage), this.tl = gsap.timeline({
                onStart: () => {
                    this.DOM.reveal.style.opacity = this.DOM.revealInner.style.opacity = 1, gsap.set(this.DOM.el, {
                        zIndex: n.length
                    })
                }
            }).to(this.DOM.revealInner, .6, {
                ease: "Expo.easeOut",
                startAt: {
                    scale: .6
                },
                scale: 1
            }).to(this.DOM.revealImage, .6, {
                ease: "Expo.easeOut",
                startAt: {
                    scale: 2
                },
                scale: 1
            }, 0)
        }
        hideImage() {
            gsap.killTweensOf(this.DOM.revealInner), gsap.killTweensOf(this.DOM.revealImage), this.tl = gsap.timeline({
                onStart: () => {
                    gsap.set(this.DOM.el, {
                        zIndex: 1
                    })
                },
                onComplete: () => {
                    gsap.set(this.DOM.reveal, {
                        opacity: 0
                    })
                }
            }).to(this.DOM.revealInner, .6, {
                ease: "Expo.easeOut",
                scale: .6,
                opacity: 0
            }).to(this.DOM.revealImage, .6, {
                ease: "Expo.easeOut",
                scale: 2
            }, 0)
        }
        loopRender() {
            this.requestId || (this.requestId = requestAnimationFrame(() => this.render()))
        }
        stopRendering() {
            this.requestId && (window.cancelAnimationFrame(this.requestId), this.requestId = void 0)
        }
        render() {
            this.requestId = void 0, this.firstRAFCycle && (this.calcBounds(), this.mouseArea = this.getMouseArea());
            var e, t, i, e = (e = Math.abs(h.x - l.x), i = 100, e <= (t = 0) ? t : i <= e ? i : e);
            m = {
                x: h.x - l.x,
                y: h.y - l.y
            }, h = {
                x: l.x,
                y: l.y
            }, this.animatableProperties.tx.current = Math.abs(l.x - this.bounds.el.left), this.animatableProperties.ty.current = "up" === this.mouseArea ? 45 : 45 - this.bounds.reveal.height, this.animatableProperties.rotation.current = this.firstRAFCycle ? 0 : s(e, 0, 175, 0, m.x < 0 ? "up" === this.mouseArea ? 60 : -60 : "up" === this.mouseArea ? -60 : 60), this.animatableProperties.brightness.current = this.firstRAFCycle ? 1 : s(e, 0, 100, 1, 8), this.animatableProperties.tx.previous = this.firstRAFCycle ? this.animatableProperties.tx.current : r(this.animatableProperties.tx.previous, this.animatableProperties.tx.current, this.animatableProperties.tx.amt), this.animatableProperties.ty.previous = this.firstRAFCycle ? this.animatableProperties.ty.current : r(this.animatableProperties.ty.previous, this.animatableProperties.ty.current, this.animatableProperties.ty.amt), this.animatableProperties.rotation.previous = this.firstRAFCycle ? this.animatableProperties.rotation.current : r(this.animatableProperties.rotation.previous, this.animatableProperties.rotation.current, this.animatableProperties.rotation.amt), this.animatableProperties.brightness.previous = this.firstRAFCycle ? this.animatableProperties.brightness.current : r(this.animatableProperties.brightness.previous, this.animatableProperties.brightness.current, this.animatableProperties.brightness.amt), gsap.set(this.DOM.reveal, {
                x: this.animatableProperties.tx.previous,
                y: this.animatableProperties.ty.previous,
                rotation: this.animatableProperties.rotation.previous,
                filter: `brightness(${this.animatableProperties.brightness.previous})`
            }), this.firstRAFCycle = !1, this.loopRender()
        }
    }
}();